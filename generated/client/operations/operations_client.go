// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	Clear(params *ClearParams) (*ClearOK, error)

	ForumCreate(params *ForumCreateParams) (*ForumCreateCreated, error)

	ForumGetOne(params *ForumGetOneParams) (*ForumGetOneOK, error)

	ForumGetThreads(params *ForumGetThreadsParams) (*ForumGetThreadsOK, error)

	ForumGetUsers(params *ForumGetUsersParams) (*ForumGetUsersOK, error)

	PostGetOne(params *PostGetOneParams) (*PostGetOneOK, error)

	PostUpdate(params *PostUpdateParams) (*PostUpdateOK, error)

	PostsCreate(params *PostsCreateParams) (*PostsCreateCreated, error)

	Status(params *StatusParams) (*StatusOK, error)

	ThreadCreate(params *ThreadCreateParams) (*ThreadCreateCreated, error)

	ThreadGetOne(params *ThreadGetOneParams) (*ThreadGetOneOK, error)

	ThreadGetPosts(params *ThreadGetPostsParams) (*ThreadGetPostsOK, error)

	ThreadUpdate(params *ThreadUpdateParams) (*ThreadUpdateOK, error)

	ThreadVote(params *ThreadVoteParams) (*ThreadVoteOK, error)

	UserCreate(params *UserCreateParams) (*UserCreateCreated, error)

	UserGetOne(params *UserGetOneParams) (*UserGetOneOK, error)

	UserUpdate(params *UserUpdateParams) (*UserUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  Clear очисткаs всех данных в базе

  Безвозвратное удаление всей пользовательской информации из базы данных.

*/
func (a *Client) Clear(params *ClearParams) (*ClearOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClearParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "clear",
		Method:             "POST",
		PathPattern:        "/service/clear",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ClearReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClearOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for clear: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ForumCreate созданиеs форума

  Создание нового форума.

*/
func (a *Client) ForumCreate(params *ForumCreateParams) (*ForumCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForumCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "forumCreate",
		Method:             "POST",
		PathPattern:        "/forum/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ForumCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForumCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for forumCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ForumGetOne получениеs информации о форуме

  Получение информации о форуме по его идентификаторе.

*/
func (a *Client) ForumGetOne(params *ForumGetOneParams) (*ForumGetOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForumGetOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "forumGetOne",
		Method:             "GET",
		PathPattern:        "/forum/{slug}/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ForumGetOneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForumGetOneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for forumGetOne: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ForumGetThreads списокs ветвей обсужления форума

  Получение списка ветвей обсужления данного форума.

Ветви обсуждения выводятся отсортированные по дате создания.

*/
func (a *Client) ForumGetThreads(params *ForumGetThreadsParams) (*ForumGetThreadsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForumGetThreadsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "forumGetThreads",
		Method:             "GET",
		PathPattern:        "/forum/{slug}/threads",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ForumGetThreadsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForumGetThreadsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for forumGetThreads: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ForumGetUsers пользователиs данного форума

  Получение списка пользователей, у которых есть пост или ветка обсуждения в данном форуме.

Пользователи выводятся отсортированные по nickname в порядке возрастания.
Порядок сотрировки должен соответсвовать побайтовому сравнение в нижнем регистре.

*/
func (a *Client) ForumGetUsers(params *ForumGetUsersParams) (*ForumGetUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForumGetUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "forumGetUsers",
		Method:             "GET",
		PathPattern:        "/forum/{slug}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ForumGetUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForumGetUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for forumGetUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostGetOne получениеs информации о ветке обсуждения

  Получение информации о ветке обсуждения по его имени.

*/
func (a *Client) PostGetOne(params *PostGetOneParams) (*PostGetOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostGetOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postGetOne",
		Method:             "GET",
		PathPattern:        "/post/{id}/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostGetOneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostGetOneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postGetOne: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUpdate изменениеs сообщения

  Изменение сообщения на форуме.

Если сообщение поменяло текст, то оно должно получить отметку `isEdited`.

*/
func (a *Client) PostUpdate(params *PostUpdateParams) (*PostUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postUpdate",
		Method:             "POST",
		PathPattern:        "/post/{id}/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostsCreate созданиеs новых постов

  Добавление новых постов в ветку обсуждения на форум.

Все посты, созданные в рамках одного вызова данного метода должны иметь одинаковую дату создания (Post.Created).

*/
func (a *Client) PostsCreate(params *PostsCreateParams) (*PostsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postsCreate",
		Method:             "POST",
		PathPattern:        "/thread/{slug_or_id}/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postsCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Status получениеs инфомарции о базе данных

  Получение инфомарции о базе данных.

*/
func (a *Client) Status(params *StatusParams) (*StatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "status",
		Method:             "GET",
		PathPattern:        "/service/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ThreadCreate созданиеs ветки

  Добавление новой ветки обсуждения на форум.

*/
func (a *Client) ThreadCreate(params *ThreadCreateParams) (*ThreadCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThreadCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "threadCreate",
		Method:             "POST",
		PathPattern:        "/forum/{slug}/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ThreadCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThreadCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for threadCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ThreadGetOne получениеs информации о ветке обсуждения

  Получение информации о ветке обсуждения по его имени.

*/
func (a *Client) ThreadGetOne(params *ThreadGetOneParams) (*ThreadGetOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThreadGetOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "threadGetOne",
		Method:             "GET",
		PathPattern:        "/thread/{slug_or_id}/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ThreadGetOneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThreadGetOneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for threadGetOne: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ThreadGetPosts сообщенияs данной ветви обсуждения

  Получение списка сообщений в данной ветке форуме.

Сообщения выводятся отсортированные по дате создания.

*/
func (a *Client) ThreadGetPosts(params *ThreadGetPostsParams) (*ThreadGetPostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThreadGetPostsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "threadGetPosts",
		Method:             "GET",
		PathPattern:        "/thread/{slug_or_id}/posts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ThreadGetPostsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThreadGetPostsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for threadGetPosts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ThreadUpdate обновлениеs ветки

  Обновление ветки обсуждения на форуме.

*/
func (a *Client) ThreadUpdate(params *ThreadUpdateParams) (*ThreadUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThreadUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "threadUpdate",
		Method:             "POST",
		PathPattern:        "/thread/{slug_or_id}/details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ThreadUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThreadUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for threadUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ThreadVote проголосоватьs за ветвь обсуждения

  Изменение голоса за ветвь обсуждения.

Один пользователь учитывается только один раз и может изменить своё
мнение.

*/
func (a *Client) ThreadVote(params *ThreadVoteParams) (*ThreadVoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThreadVoteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "threadVote",
		Method:             "POST",
		PathPattern:        "/thread/{slug_or_id}/vote",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ThreadVoteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThreadVoteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for threadVote: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserCreate созданиеs нового пользователя

  Создание нового пользователя в базе данных.

*/
func (a *Client) UserCreate(params *UserCreateParams) (*UserCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userCreate",
		Method:             "POST",
		PathPattern:        "/user/{nickname}/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserGetOne получениеs информации о пользователе

  Получение информации о пользователе форума по его имени.

*/
func (a *Client) UserGetOne(params *UserGetOneParams) (*UserGetOneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserGetOneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userGetOne",
		Method:             "GET",
		PathPattern:        "/user/{nickname}/profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserGetOneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserGetOneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userGetOne: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UserUpdate изменениеs данных о пользователе

  Изменение информации в профиле пользователя.

*/
func (a *Client) UserUpdate(params *UserUpdateParams) (*UserUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "userUpdate",
		Method:             "POST",
		PathPattern:        "/user/{nickname}/profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UserUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UserUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for userUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
